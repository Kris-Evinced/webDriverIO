/// <reference path="./axe.d.ts" />

import {TInitOptions} from "src/commands/types";
import {IssueSeverity, SaveFileFormat, ValidationType} from "./enums";

type OfflineCredentials = {
    serviceId: string;
    token: string;
}

type Credentials = {
    serviceId: string;
    secret: string;
}

type IssueElement = {
    componentId: string;
    domSnippet: string;
    id: string;
    index: string;
    pageUrl: string;
    selector: string;
};

type IssueTag = {
    description: string;
    id: string;
    link: string;
};

type Issue = {
    id: string;
    index: string;
    signature: string;
    type: {
        id: string;
        name: string;
    };
    severity: {
        id: string;
        name: string;
    };
    summary: string;
    description: string;
    additionalInformation: any;
    duplicates?: string;
    elements: IssueElement[];
    firstSeenTime: number;
    tags: IssueTag[];
    knowledgeBaseLink?: string;
};

type IssuesFilter = {
    exclude?: {
        urls?: (string | RegExp)[]
        selectors?: string[]
        types?: string[] | ValidationType[]
        severities?: IssueSeverity[]
        signatures?: string[]
        tags?: IssueTagId[]
    },
    customFilter?: CustomIssuesFilter
}

interface CustomIssuesFilter {
    (issue: Issue): boolean
}

type IssueTagId = string

type Report = {
    issues: Issue[]
}

declare namespace WebdriverIO {
    interface Browser {
        evAnalyze: (initOptions?: TInitOptions) => Promise<Report>
        evStart: (initOptions?: TInitOptions) => Promise<void>
        evStop: () => Promise<Report>
        evSaveFile: (report: Report, format: SaveFileFormat, destination: string) => Promise<void>
    }
}

declare function setOfflineCredentials(credentials: OfflineCredentials): void;
declare function setCredentials(credentials: Credentials): void;
